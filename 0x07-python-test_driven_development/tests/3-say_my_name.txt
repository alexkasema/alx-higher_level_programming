# Testing 3-say_my_name Module

=========================================
def say_my_name(first_name, last_name="")
=========================================

Usage
=======
say_my_name(first_name, last_name="")
	Args:
		first_name (str): String Input
		last_name (str): String Input
	Raises:
	       TypeError if inputs are not strings.
	Returns:
		Prints out the names.

Import Module
==============
::
	>>> say_my_name = __import__('3-say_my_name').say_my_name

Correct Output.
===============
::
	>>> say_my_name('John', 'Wick')
	My name is John Wick

If only `first_name` is passed
::
	>>> say_my_name('John')
	My name is John 

Check if no arguments are passed.
================================
::
	>>> say_my_name()
	Traceback (most recent call last):
	...
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'

Checking Invalid Inputs
====================

If `first_name` is not given.
::
	>>> say_my_name(, 'Wick')
	Traceback (most recent call last):
	...
	SyntaxError: invalid syntax

If it's an integer it will raise a TypeError.
::
	>>> say_my_name(2, 'Wick')
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string

If None is passed it will raise a TypeError.
::
	>>> say_my_name(None, 'Wick')
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string

If non String is passed raise a TypeError.
::
	>>> say_my_name(True)
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string

::
	>>> say_my_name([1, 2], 'Wick')
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string

::
	>>> say_my_name('John', {'id': 2, 'name': 'Wick'})
	Traceback (most recent call last):
	...
	TypeError: last_name must be a string
